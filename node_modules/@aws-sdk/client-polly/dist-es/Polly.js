import { DeleteLexiconCommand, } from "./commands/DeleteLexiconCommand";
import { DescribeVoicesCommand, } from "./commands/DescribeVoicesCommand";
import { GetLexiconCommand } from "./commands/GetLexiconCommand";
import { GetSpeechSynthesisTaskCommand, } from "./commands/GetSpeechSynthesisTaskCommand";
import { ListLexiconsCommand, } from "./commands/ListLexiconsCommand";
import { ListSpeechSynthesisTasksCommand, } from "./commands/ListSpeechSynthesisTasksCommand";
import { PutLexiconCommand } from "./commands/PutLexiconCommand";
import { StartSpeechSynthesisTaskCommand, } from "./commands/StartSpeechSynthesisTaskCommand";
import { SynthesizeSpeechCommand, } from "./commands/SynthesizeSpeechCommand";
import { PollyClient } from "./PollyClient";
export class Polly extends PollyClient {
    deleteLexicon(args, optionsOrCb, cb) {
        const command = new DeleteLexiconCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVoices(args, optionsOrCb, cb) {
        const command = new DescribeVoicesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getLexicon(args, optionsOrCb, cb) {
        const command = new GetLexiconCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSpeechSynthesisTask(args, optionsOrCb, cb) {
        const command = new GetSpeechSynthesisTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listLexicons(args, optionsOrCb, cb) {
        const command = new ListLexiconsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listSpeechSynthesisTasks(args, optionsOrCb, cb) {
        const command = new ListSpeechSynthesisTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putLexicon(args, optionsOrCb, cb) {
        const command = new PutLexiconCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startSpeechSynthesisTask(args, optionsOrCb, cb) {
        const command = new StartSpeechSynthesisTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    synthesizeSpeech(args, optionsOrCb, cb) {
        const command = new SynthesizeSpeechCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
